{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\AP073619\\\\OneDrive - Cerner Corporation\\\\Desktop\\\\FrontEnd\\\\Patient-Appointment-Scheduling-System-NG073320\\\\Patient-Appointment-Scheduling-System-NG073320\\\\appointment-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.REACT_APP_API_URL + \"/appointments/\";\nexport function getAppointments() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\nexport function getAppointmentBySlug(slug) {\n  return fetch(baseUrl + \"?slug=\" + slug).then(response => {\n    if (!response.ok) throw new Error(\"Network response was not ok.\");\n    return response.json().then(appointments => {\n      if (appointments.length !== 1) throw new Error(\"Appointment not found: \" + slug);\n      return appointments[0]; // should only find one appointment for a given slug, so return it.\n    });\n  }).catch(handleError);\n}\nexport function saveAppointment(appointment) {\n  return fetch(baseUrl + (appointment.id || \"\"), {\n    method: appointment.id ? \"PUT\" : \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(_objectSpread({}, appointment, {\n      // Parse authorId to a number (in case it was sent as a string).\n      appointmentId: parseInt(appointment.appointmentId, 10)\n    }))\n  }).then(handleResponse).catch(handleError);\n}\nexport function deleteAppointment(appointmentId) {\n  return fetch(baseUrl + appointmentId, {\n    method: \"DELETE\"\n  }).then(handleResponse).catch(handleError);\n}","map":{"version":3,"sources":["C:\\Users\\AP073619\\OneDrive - Cerner Corporation\\Desktop\\FrontEnd\\Patient-Appointment-Scheduling-System-NG073320\\Patient-Appointment-Scheduling-System-NG073320\\appointment-frontend\\src\\api\\appointmentApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","REACT_APP_API_URL","getAppointments","fetch","then","catch","getAppointmentBySlug","slug","response","ok","Error","json","appointments","length","saveAppointment","appointment","id","method","headers","body","JSON","stringify","appointmentId","parseInt","deleteAppointment"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,YAA5C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,gBAAhD;AAEA,OAAO,SAASC,eAAT,GAA2B;AAChC,SAAOC,KAAK,CAACL,OAAD,CAAL,CACJM,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD;AAED,OAAO,SAASS,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,SAAOJ,KAAK,CAACL,OAAO,GAAG,QAAV,GAAqBS,IAAtB,CAAL,CACJH,IADI,CACCI,QAAQ,IAAI;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AAClB,WAAOF,QAAQ,CAACG,IAAT,GAAgBP,IAAhB,CAAqBQ,YAAY,IAAI;AAC1C,UAAIA,YAAY,CAACC,MAAb,KAAwB,CAA5B,EACE,MAAM,IAAIH,KAAJ,CAAU,4BAA4BH,IAAtC,CAAN;AACF,aAAOK,YAAY,CAAC,CAAD,CAAnB,CAH0C,CAGlB;AACzB,KAJM,CAAP;AAKD,GARI,EASJP,KATI,CASER,WATF,CAAP;AAUD;AAED,OAAO,SAASiB,eAAT,CAAyBC,WAAzB,EAAsC;AAC3C,SAAOZ,KAAK,CAACL,OAAO,IAAIiB,WAAW,CAACC,EAAZ,IAAkB,EAAtB,CAAR,EAAmC;AAC7CC,IAAAA,MAAM,EAAEF,WAAW,CAACC,EAAZ,GAAiB,KAAjB,GAAyB,MADY;AACJ;AACzCE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFoC;AAG7CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,mBACDN,WADC;AAEJ;AACAO,MAAAA,aAAa,EAAEC,QAAQ,CAACR,WAAW,CAACO,aAAb,EAA4B,EAA5B;AAHnB;AAHuC,GAAnC,CAAL,CASJlB,IATI,CASCR,cATD,EAUJS,KAVI,CAUER,WAVF,CAAP;AAWD;AAED,OAAO,SAAS2B,iBAAT,CAA2BF,aAA3B,EAA0C;AAC/C,SAAOnB,KAAK,CAACL,OAAO,GAAGwB,aAAX,EAA0B;AAAEL,IAAAA,MAAM,EAAE;AAAV,GAA1B,CAAL,CACJb,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD","sourcesContent":["import { handleResponse, handleError } from \"./apiUtils\";\r\nconst baseUrl = process.env.REACT_APP_API_URL + \"/appointments/\";\r\n\r\nexport function getAppointments() {\r\n  return fetch(baseUrl)\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n\r\nexport function getAppointmentBySlug(slug) {\r\n  return fetch(baseUrl + \"?slug=\" + slug)\r\n    .then(response => {\r\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\r\n      return response.json().then(appointments => {\r\n        if (appointments.length !== 1)\r\n          throw new Error(\"Appointment not found: \" + slug);\r\n        return appointments[0]; // should only find one appointment for a given slug, so return it.\r\n      });\r\n    })\r\n    .catch(handleError);\r\n}\r\n\r\nexport function saveAppointment(appointment) {\r\n  return fetch(baseUrl + (appointment.id || \"\"), {\r\n    method: appointment.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\r\n    headers: { \"content-type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      ...appointment,\r\n      // Parse authorId to a number (in case it was sent as a string).\r\n      appointmentId: parseInt(appointment.appointmentId, 10)\r\n    })\r\n  })\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n\r\nexport function deleteAppointment(appointmentId) {\r\n  return fetch(baseUrl + appointmentId, { method: \"DELETE\" })\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}